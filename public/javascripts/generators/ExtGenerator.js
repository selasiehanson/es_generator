// Generated by CoffeeScript 1.3.3
(function() {

  define(["jquery", "underscore", "modules/helper", 'modules/mediator'], function($, _, helper, mediator) {
    var ExtGen;
    ExtGen = {};
    ExtGen.init = function(code, configuration, fileInfo) {
      var config, editViewFields, gridViewFields, info, item, modelFields, name, names, namespace, output, raw, ref, references, result, somevar, _fields, _label, _name;
      this.fileInfo = fileInfo;
      this.outCode = {
        model: "",
        store: "",
        editView: "",
        gridView: "",
        controller: ""
      };
      window.config = configuration;
      if (!(configuration != null)) {
        info = {
          message: "A configuration file does not exist. Please make sure one exists",
          status: "error"
        };
        mediator.publish("app_notify", info);
        return;
      }
      somevar = ((function() {
        try {
          return config = Ext.decode(configuration);
        } catch (error) {
          return error;
        }
      })());
      if (!typeof somevar === "object") {
        info = {
          message: somevar,
          status: "error"
        };
        mediator.publish("app_notify", info);
      }
      somevar = ((function() {
        try {
          return raw = Ext.decode(code);
        } catch (error) {
          return error;
        }
      })());
      if (!typeof somevar === "object") {
        info = {
          message: somevar,
          status: "error"
        };
        mediator.publish("app_notify", info);
      }
      editViewFields = [];
      gridViewFields = [];
      modelFields = [];
      _fields = [];
      result = this.verify(raw);
      if (!result.success) {
        info = {
          message: result.message,
          status: "error"
        };
        mediator.publish("app_notify", info);
        return false;
      }
      result = this.verify(config, "config");
      if (!result.success) {
        info = {
          message: result.message,
          status: "error"
        };
        mediator.publish("app_notify", info);
        return false;
      }
      /*
      		check out type for specific types such as lookups
      */

      if (raw.type) {
        switch (raw.type) {
          case "lookup":
            raw.fields = ["name", "description"];
        }
      }
      /*
      		generate appropriate field and label names
      */

      if (raw.fields != null) {
        window.names = names = helper.fixNames(raw.fields);
        _fields = _.map(names, function(n) {
          return "'" + n.field + "'";
        });
        modelFields = _fields;
        /*
        			generate form items
        */

        for (name in names) {
          item = {
            xtype: 'textfield',
            fieldLabel: names[name]["label"],
            name: names[name]["field"]
          };
          editViewFields.push(Ext.encode(item));
          item = {
            header: names[name]["label"],
            dataIndex: names[name]["field"],
            flex: 1
          };
          gridViewFields.push(Ext.encode(item));
        }
      }
      /*
      		generate all the fields for the models including references
      */

      if (raw.has != null) {
        references = helper.fixNames(raw.has);
        for (ref in references) {
          modelFields.push("'" + references[ref]["field"] + "'");
          _name = references[ref]["field"] + "Id";
          modelFields.push("'" + _name + "'");
          _label = references[ref]["label"];
          item = {
            xtype: 'combo',
            fieldLabel: _label,
            name: _name,
            store: raw.entity + 's',
            displayField: 'name',
            valueField: 'id',
            allowBlank: false
          };
          editViewFields.push(Ext.encode(item));
          item = {
            header: _label,
            dataIndex: references[ref]["field"],
            flex: 1
          };
          gridViewFields.push(Ext.encode(item));
        }
      }
      if (config.namespace != null) {
        namespace = config.namespace;
      }
      if (raw.fields != null) {
        output = {
          model: {
            namespace: namespace,
            entityName: raw.entity,
            fields: modelFields,
            storeName: raw.entity + 's'
          },
          store: {
            namespace: namespace,
            storeName: raw.entity + 's',
            entityName: raw.entity
          },
          editView: {
            namespace: namespace,
            viewName: raw.entity,
            alias: raw.entity.toLowerCase(),
            name: raw.entity,
            items: editViewFields
          },
          gridView: {
            namespace: namespace,
            name: raw.entity,
            storeName: raw.entity + 's',
            alias: raw.entity.toLowerCase(),
            items: gridViewFields,
            iconsPath: 'somepath'
          },
          controller: {
            namespace: namespace,
            name: raw.entity,
            entityName: raw.entity,
            storeName: raw.entity + 's'
          }
        };
        this.mvcs = output;
      }
      return true;
    };
    ExtGen.verify = function(raw, type) {
      var result;
      result = {
        message: "",
        success: true
      };
      switch (type) {
        case "config":
          if (raw != null) {
            if (!(raw.namespace != null)) {
              result = {
                message: "Invalid configuration file. No namespace found. Please provide one",
                success: false
              };
            } else if (!(raw.applicationName != null)) {
              result = {
                message: "Invalid configuration file. No Application Name found. Please provide one",
                success: false
              };
            }
          } else {
            result = {
              message: "Not a valid configuration file",
              success: false
            };
          }
          break;
        default:
          if (raw != null) {
            if (!(raw.entity != null)) {
              result = {
                message: "All model files should have an entity element",
                success: false
              };
            }
          } else {
            result = {
              message: "Not a valid model file",
              success: false
            };
          }
      }
      return result;
    };
    ExtGen.process = function() {
      this.results = [];
      this.createModel();
      this.createStore();
      this.createEditView();
      this.createGridView();
      return this.createController();
    };
    ExtGen.checkErrors = function(callback) {
      var check, waiting,
        _this = this;
      check = function() {
        var hasErrors, info, message, result, _i, _len, _ref;
        if (_this.results.length === 5) {
          message = "Error were encountered in creating the following outputs";
          hasErrors = false;
          _ref = _this.results;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            result = _ref[_i];
            if (result["status"] === false) {
              hasErrors = true;
              message += " " + result["type"];
            }
          }
          if (!hasErrors) {
            message = "File compiled successfully";
          }
          info = {
            message: message,
            status: hasErrors
          };
          clearInterval(waiting);
          mediator.publish("app_notify", info);
          mediator.publish("compilationSuccessFull", _this.fileInfo);
          if (callback) {
            return callback();
          }
        }
      };
      return waiting = setInterval(check, 500);
    };
    ExtGen.createModel = function() {
      var data;
      data = this.mvcs.model;
      return this.getTemplate({
        file: 'model.js',
        folder: 'ExtJs'
      }, data, "model");
    };
    ExtGen.createStore = function() {
      var data;
      data = this.mvcs.store;
      return this.getTemplate({
        file: 'store.js',
        folder: 'ExtJs'
      }, data, "store");
    };
    ExtGen.createEditView = function() {
      var data;
      data = this.mvcs.editView;
      return this.getTemplate({
        file: 'edit.js',
        folder: 'ExtJs'
      }, data, "editView");
    };
    ExtGen.createGridView = function() {
      var data;
      data = this.mvcs.gridView;
      return this.getTemplate({
        file: 'grid.js',
        folder: 'ExtJs'
      }, data, "gridView");
    };
    ExtGen.createController = function() {
      var data;
      data = this.mvcs.controller;
      return this.getTemplate({
        file: 'controller.js',
        folder: 'ExtJs'
      }, data, "controller");
    };
    ExtGen.templateTize = function(src, data, type) {
      var func, info, out, result;
      func = _.template(src);
      try {
        out = func(data);
      } catch (error) {
        info = {
          message: error.toString(),
          status: "error"
        };
        mediator.publish("app_notify", info);
        return;
      }
      switch (type) {
        case "model":
          this.outCode.model = out;
          break;
        case "store":
          this.outCode.store = out;
          break;
        case "editView":
          this.outCode.editView = out;
          break;
        case "gridView":
          this.outCode.gridView = out;
          break;
        case "controller":
          this.outCode.controller = out;
      }
      result = {
        success: true,
        type: type
      };
      return this.results.push(result);
    };
    ExtGen.getTemplate = function(info, input, type, callback) {
      var _this = this;
      $.get('/template', info, function(res) {
        _this.templateTize(res["data"], input, type);
        if (callback) {
          callback();
        }
      });
    };
    ExtGen.saveCode = function() {
      window.out = this.outCode;
      return console.log(this.outCode);
    };
    ExtGen.getOutput = function() {
      return this.outCode;
    };
    return ExtGen;
  });

}).call(this);
